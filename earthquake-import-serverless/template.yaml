AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  Serverless application for importing earthquake data.
  This application consists of a scheduled fetcher Lambda that saves raw data to S3,
  and a processor Lambda that is triggered by S3 events via SNS to process the data and save it to DynamoDB.

Globals:
  Function:
    Timeout: 20
    MemorySize: 256
    Runtime: nodejs20.x

Resources:
  # DynamoDB Table for storing processed earthquake data
  EarthquakeDataTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      TableName: EarthquakeData
      PrimaryKey:
        Name: id
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  # SNS Topic to decouple S3 from Lambda
  S3NotificationTopic:
    Type: AWS::SNS::Topic

  # Policy to allow S3 to publish to the SNS topic
  S3NotificationTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      PolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: s3.amazonaws.com
            Action: "sns:Publish"
            Resource: !Ref S3NotificationTopic
            Condition:
              ArnLike:
                "aws:SourceArn": !Sub "arn:aws:s3:::earthquake-raw-data-${AWS::AccountId}-${AWS::Region}"
      Topics:
        - !Ref S3NotificationTopic

  # S3 Bucket for storing raw data
  RawDataBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "earthquake-raw-data-${AWS::AccountId}-${AWS::Region}"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      NotificationConfiguration:
        TopicConfigurations:
          - Event: "s3:ObjectCreated:*"
            Topic: !Ref S3NotificationTopic
            Filter:
              S3Key:
                Rules:
                  - Name: prefix
                    Value: "raw/"

  # --- Fetcher Lambda ---
  FetcherFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/fetcher/
      Handler: app.handler
      Description: Fetches raw earthquake data from an external API and stores it in S3.
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - "s3:PutObject"
                - "s3:DeleteObject"
                - "s3:ListBucket"
              Resource:
                - !Sub "arn:aws:s3:::${RawDataBucket}/*"
                - !Sub "arn:aws:s3:::${RawDataBucket}"
      Environment:
        Variables:
          BUCKET_NAME: !Ref RawDataBucket
      MemorySize: 128
      Timeout: 30
      Events:
        ScheduleEvent:
          Type: Schedule
          Properties:
            Schedule: cron(0 * * * ? *)
            Name: earthquake-fetch-schedule
            Description: Schedule to fetch earthquake data every hour
            Enabled: True

  # --- Processor Lambda ---
  ProcessorFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/processor/
      Handler: app.handler
      Description: Processes raw earthquake data from S3 and saves it to DynamoDB.
      Policies:
        - S3ReadPolicy:
            BucketName: !Ref RawDataBucket
        - DynamoDBWritePolicy:
            TableName: !Ref EarthquakeDataTable
        - Statement:
            - Effect: Allow
              Action:
                - "dynamodb:Scan"
                - "dynamodb:DeleteItem"
              Resource: !GetAtt EarthquakeDataTable.Arn
      Environment:
        Variables:
          TABLE_NAME: !Ref EarthquakeDataTable
      MemorySize: 128
      Timeout: 30
      Events:
        SnsEvent:
          Type: SNS
          Properties:
            Topic: !Ref S3NotificationTopic

Outputs:
  RawDataBucketName:
    Description: "Name of the S3 bucket for raw data"
    Value: !Ref RawDataBucket
  EarthquakeDataTableName:
    Description: "Name of the DynamoDB table for processed earthquake data"
    Value: !Ref EarthquakeDataTable
